{"version":3,"sources":["petra.jpeg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Body","styled","div","Container","Img","img","Border","Blend","Grid","Item","props","isWhite","App","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qLAAAA,EAAOC,QAAU,IAA0B,oC,kHCKrCC,EAAOC,IAAOC,IAAV,gEAAGD,CAAH,4IAcJE,EAAYF,IAAOC,IAAV,qEAAGD,CAAH,iDAMTG,EAAMH,IAAOI,IAAV,+DAAGJ,CAAH,MAKHK,EAASL,IAAOC,IAAV,kEAAGD,CAAH,0KAUNM,EAAQN,IAAOC,IAAV,iEAAGD,CAAH,0EASLO,EAAOP,IAAOC,IAAV,gEAAGD,CAAH,sDAKJQ,EAAOR,IAAOC,IAAV,gEAAGD,CAAH,6CACY,SAAAS,GAAK,OAAIA,EAAMC,SAAW,WAuCjCC,MAlCf,WACE,OACE,kBAACZ,EAAD,KACE,kBAACG,EAAD,KACE,kBAACC,EAAD,CAAKS,IAAKR,IAAKS,IAAI,UACnB,kBAACR,EAAD,MACA,kBAACE,EAAD,KAEE,kBAACC,EAAD,CAAME,SAAO,IAEb,kBAACF,EAAD,MAEA,kBAACA,EAAD,MAEA,kBAACA,EAAD,CAAME,SAAO,KAEf,kBAACJ,EAAD,KACE,kBAACH,EAAD,CAAKS,IAAKR,IAAKS,IAAI,UACnB,kBAACN,EAAD,KAEE,kBAACC,EAAD,MAEA,kBAACA,EAAD,CAAME,SAAO,IAEb,kBAACF,EAAD,CAAME,SAAO,IAEb,kBAACF,EAAD,WC1EQM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.347857e9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/petra.6b02d831.jpeg\";","import React from 'react';\nimport styled from 'styled-components/macro';\nimport './App.css';\nimport img from './petra.jpeg';\n\nconst Body = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  background-color: gray;\n\n  * {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n  }\n`;\n\nconst Container = styled.div`\n  position: relative;\n  height: 400px;\n  width: 400px;\n`;\n\nconst Img = styled.img`\n\n\n`;\n\nconst Border = styled.div`\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  box-sizing: border-box;\n  border: 15px #eb311f solid;\n  transform: rotate(45deg);\n  box-shadow: 0 0 10px #eb311f, inset 0 0 20px #eb311f;\n`;\n\nconst Blend = styled.div`\n  mix-blend-mode: multiply;\n * {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n }\n`;\n\nconst Grid = styled.div`\n  display: grid;\n  grid: repeat(2, 1fr) / repeat(2, 1fr);\n`;\n\nconst Item = styled.div`\n  background-color: ${props => props.isWhite && 'white'};\n  position: relative;\n`;\n\n\nfunction App() {\n  return (\n    <Body>\n      <Container>\n        <Img src={img} alt=\"model\" />\n        <Border />\n        <Grid>\n          {/* top left */}\n          <Item isWhite></Item>\n          {/* top right */}\n          <Item ></Item>\n          {/* bottom left */}\n          <Item ></Item>\n          {/* bottom left */}\n          <Item isWhite></Item>\n        </Grid>\n        <Blend>\n          <Img src={img} alt=\"model\" />\n          <Grid>\n            {/* top left */}\n            <Item ></Item>\n            {/* top right */}\n            <Item isWhite></Item>\n            {/* bottom left */}\n            <Item isWhite></Item>\n            {/* bottom left */}\n            <Item></Item>\n          </Grid>\n        </Blend>\n      </Container>\n    </Body>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}